teste.ks <- ks.test(arima.vendas$residuals, "pnorm", mean(arima.vendas$residuals, na.rm = TRUE),
sd(arima.vendas$residuals, na.rm = TRUE))
resultado.ks <- if (teste.ks$p.value >= 0.01) {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, residuos normais")
} else {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, não normalidade dos resíduos")
}
# p-valor = 0.1237 > 0,01 - Aceita H0, ou seja, resíduos normais
teste.ac <- ArchTest(arima.vendas$residuals)
resultado.ac <- if (teste.ks$p.value >= 0.01) {
paste0("teste ARCH ", teste.ac$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, garante não existência de efeitos ARCH")
} else {
paste0("teste ARCH ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, existência de efeitos ARCH")
}
arima.previsao <- forecast(arima.vendas, 12)
#autoplot(arima.previsao)
acurracia <- accuracy(arima.previsao$mean, vendas.teste)
acurracia.teste <- acurracia["Test set", "MAPE"]
resultado.acuracia <- paste0("Acurácia do modelo é de ", acurracia.teste %>% formatNumero(), " %")
resultado <- paste(resultado.lb, resultado.ks, resultado.ac, resultado.acuracia, "\n", sep = "\n")
cat(resultado)
p <- autoplot(
vendas.treino,
main = paste0("Grupo: ", grupoPar),
ylab = "Vendas R$ milhões",
xlab = "Meses"
) +
autolayer(vendas.teste, serie = "Valores Reais") +
autolayer(arima.previsao$mean, serie = "Forecast") +
scale_colour_viridis_d() +
scale_y_continuous(labels = scales::comma) +
labs(subtitle = resultado) +
theme_bw()
jpeg(filename = paste0("files/forecast", grupoPar, ".jpeg"), width = 1200*2, height = 400*2)
print(p)
dev.off()
}
testaPrevisao(grupoPar = "CALCADOS", periodoLockDown = c('2020-01', '2020-12'))
testaPrevisao <- function(grupoPar = "MOVEL", periodoLockDown = c('2020-01', '2020-12')) {
meses <- df.vendas %>% select(data) %>% unique()
df.vendas.grupo <- df.vendas %>%
merge(y = df.prd %>% filter(grupo == grupoPar), by = "prdno") %>%
group_by(data) %>%
summarise(totalMensal = sum(valor / 1000000)) %>%
merge(y = meses, by = "data", all.y = TRUE) %>%
mutate(totalMensal = ifelse(is.na(totalMensal), 0.00, totalMensal)) %>%
mutate(totalMensal = ifelse((data %>% format("%Y-%m") < periodoLockDown[1]) |
(data %>% format("%Y-%m") > periodoLockDown[2]),
totalMensal, NA))
ts.vendas <- ts(df.vendas.grupo$totalMensal, start = c(2008, 3), end = c(2021, 12), 12)
vendas.treino <- window(ts.vendas, start = c(2010, 1), end = c(2020, 12))
vendas.teste <- window(ts.vendas, start = c(2021, 1), end = c(2021, 12))
#  autoplot(ts.vendas) +
#    autolayer(vendas.treino, series = "Treino") +
#    autolayer(vendas.teste, series = "Teste") +
#    theme_bw()
arima.vendas <- auto.arima(vendas.treino, trace = T)
jpeg(filename = paste0("files/residuos", grupoPar, ".jpeg"), width = 1200, height = 400)
teste.lb <- checkresiduals(arima.vendas)
dev.off()
# 1. teste de Ljung-Box p-value = 0.5589>0.01, aceitamos H0, resíduos não são
# correlacionados
resultado.lb <- if (teste.lb$p.value >= 0.01) {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" > 0.01 Aceitamos H0, residuos não são correlacionados")
} else {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" < 0.01 Aceitamos H1, residuos são correlacionados")
}
# 2. Normalidade dos resíduos
teste.ks <- ks.test(arima.vendas$residuals, "pnorm", mean(arima.vendas$residuals, na.rm = TRUE),
sd(arima.vendas$residuals, na.rm = TRUE))
resultado.ks <- if (teste.ks$p.value >= 0.01) {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, residuos normais")
} else {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, não normalidade dos resíduos")
}
# p-valor = 0.1237 > 0,01 - Aceita H0, ou seja, resíduos normais
teste.ac <- ArchTest(arima.vendas$residuals)
resultado.ac <- if (teste.ks$p.value >= 0.01) {
paste0("teste ARCH ", teste.ac$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, garante não existência de efeitos ARCH")
} else {
paste0("teste ARCH ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, existência de efeitos ARCH")
}
arima.previsao <- forecast(arima.vendas, 12)
#autoplot(arima.previsao)
acurracia <- accuracy(arima.previsao$mean, vendas.teste)
acurracia.teste <- acurracia["Test set", "MAPE"]
resultado.acuracia <- paste0("Acurácia do modelo é de ", acurracia.teste %>% formatNumero(), " %")
resultado <- paste(resultado.lb, resultado.ks, resultado.ac, resultado.acuracia, "\n", sep = "\n")
cat(resultado)
p <- autoplot(
vendas.treino,
main = paste0("Grupo: ", grupoPar),
ylab = "Vendas R$ milhões",
xlab = "Meses"
) +
autolayer(vendas.teste, serie = "Valores Reais") +
autolayer(arima.previsao$mean, serie = "Forecast") +
#    scale_colour_viridis_d() +
scale_y_continuous(labels = scales::comma) +
labs(subtitle = resultado) +
theme_bw()
jpeg(filename = paste0("files/forecast", grupoPar, ".jpeg"), width = 1200, height = 400)
print(p)
dev.off()
}
testaPrevisao(grupoPar = "CALCADOS", periodoLockDown = c('2020-01', '2020-12'))
testaPrevisao(grupoPar = "CALCADOS", periodoLockDown = c('2020-03', '2020-12'))
testaPrevisao <- function(grupoPar = "MOVEL", periodoLockDown = c('2020-01', '2020-12')) {
meses <- df.vendas %>% select(data) %>% unique()
df.vendas.grupo <- df.vendas %>%
merge(y = df.prd %>% filter(grupo == grupoPar), by = "prdno") %>%
group_by(data) %>%
summarise(totalMensal = sum(valor / 1000000)) %>%
merge(y = meses, by = "data", all.y = TRUE) %>%
mutate(totalMensal = ifelse(is.na(totalMensal), 0.00, totalMensal)) %>%
mutate(totalMensal = ifelse((data %>% format("%Y-%m") < periodoLockDown[1]) |
(data %>% format("%Y-%m") > periodoLockDown[2]),
totalMensal, NA))
ts.vendas <- ts(df.vendas.grupo$totalMensal, start = c(2008, 3), end = c(2021, 12), 12)
vendas.treino <- window(ts.vendas, start = c(2008, 3), end = c(2020, 12))
vendas.teste <- window(ts.vendas, start = c(2021, 1), end = c(2021, 12))
#  autoplot(ts.vendas) +
#    autolayer(vendas.treino, series = "Treino") +
#    autolayer(vendas.teste, series = "Teste") +
#    theme_bw()
arima.vendas <- auto.arima(vendas.treino, trace = T)
jpeg(filename = paste0("files/residuos", grupoPar, ".jpeg"), width = 1200, height = 400)
teste.lb <- checkresiduals(arima.vendas)
dev.off()
# 1. teste de Ljung-Box p-value = 0.5589>0.01, aceitamos H0, resíduos não são
# correlacionados
resultado.lb <- if (teste.lb$p.value >= 0.01) {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" > 0.01 Aceitamos H0, residuos não são correlacionados")
} else {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" < 0.01 Aceitamos H1, residuos são correlacionados")
}
# 2. Normalidade dos resíduos
teste.ks <- ks.test(arima.vendas$residuals, "pnorm", mean(arima.vendas$residuals, na.rm = TRUE),
sd(arima.vendas$residuals, na.rm = TRUE))
resultado.ks <- if (teste.ks$p.value >= 0.01) {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, residuos normais")
} else {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, não normalidade dos resíduos")
}
# p-valor = 0.1237 > 0,01 - Aceita H0, ou seja, resíduos normais
teste.ac <- ArchTest(arima.vendas$residuals)
resultado.ac <- if (teste.ks$p.value >= 0.01) {
paste0("teste ARCH ", teste.ac$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, garante não existência de efeitos ARCH")
} else {
paste0("teste ARCH ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, existência de efeitos ARCH")
}
arima.previsao <- forecast(arima.vendas, 12)
#autoplot(arima.previsao)
acurracia <- accuracy(arima.previsao$mean, vendas.teste)
acurracia.teste <- acurracia["Test set", "MAPE"]
resultado.acuracia <- paste0("Acurácia do modelo é de ", acurracia.teste %>% formatNumero(), " %")
resultado <- paste(resultado.lb, resultado.ks, resultado.ac, resultado.acuracia, "\n", sep = "\n")
cat(resultado)
p <- autoplot(
vendas.treino,
main = paste0("Grupo: ", grupoPar),
ylab = "Vendas R$ milhões",
xlab = "Meses"
) +
autolayer(vendas.teste, serie = "Valores Reais") +
autolayer(arima.previsao$mean, serie = "Forecast") +
#    scale_colour_viridis_d() +
scale_y_continuous(labels = scales::comma) +
labs(subtitle = resultado) +
theme_bw()
jpeg(filename = paste0("files/forecast", grupoPar, ".jpeg"), width = 1200, height = 400)
print(p)
dev.off()
}
testaPrevisao(grupoPar = "CALCADOS", periodoLockDown = c('2020-03', '2020-12'))
testaPrevisao(grupoPar = "MOVEL", periodoLockDown = c('2020-03', '2020-12'))
testaPrevisao <- function(grupoPar = "MOVEL", periodoLockDown = c('2020-01', '2020-12')) {
mes.inicial.ld <- periodoLockDown[1]
mes.final.ld <- periodoLockDown[2]
meses <- df.vendas %>% select(data) %>% unique()
df.vendas.grupo <- df.vendas %>%
merge(y = df.prd %>% filter(grupo == grupoPar), by = "prdno") %>%
group_by(data) %>%
summarise(totalMensal = sum(valor / 1000000)) %>%
merge(y = meses, by = "data", all.y = TRUE) %>%
mutate(totalMensal = ifelse(is.na(totalMensal), 0.00, totalMensal)) %>%
mutate(totalMensal = ifelse((data %>% format("%Y-%m") < mes.inicial.ld) |
(data %>% format("%Y-%m") > mes.final.ld),
totalMensal, NA))
ts.vendas <- ts(df.vendas.grupo$totalMensal, start = c(2008, 3), end = c(2021, 12), 12)
vendas.treino <- window(ts.vendas, start = c(2008, 3), end = c(2020, 12))
vendas.teste <- window(ts.vendas, start = c(2021, 1), end = c(2021, 12))
#  autoplot(ts.vendas) +
#    autolayer(vendas.treino, series = "Treino") +
#    autolayer(vendas.teste, series = "Teste") +
#    theme_bw()
arima.vendas <- auto.arima(vendas.treino, trace = T)
jpeg(filename = paste0("files/residuos", grupoPar, ".jpeg"), width = 1200, height = 400)
teste.lb <- checkresiduals(arima.vendas)
dev.off()
# 1. teste de Ljung-Box p-value = 0.5589>0.01, aceitamos H0, resíduos não são
# correlacionados
resultado.lb <- if (teste.lb$p.value >= 0.01) {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" > 0.01 Aceitamos H0, residuos não são correlacionados")
} else {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" < 0.01 Aceitamos H1, residuos são correlacionados")
}
# 2. Normalidade dos resíduos
teste.ks <- ks.test(arima.vendas$residuals, "pnorm", mean(arima.vendas$residuals, na.rm = TRUE),
sd(arima.vendas$residuals, na.rm = TRUE))
resultado.ks <- if (teste.ks$p.value >= 0.01) {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, residuos normais")
} else {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, não normalidade dos resíduos")
}
# p-valor = 0.1237 > 0,01 - Aceita H0, ou seja, resíduos normais
teste.ac <- ArchTest(arima.vendas$residuals)
resultado.ac <- if (teste.ks$p.value >= 0.01) {
paste0("teste ARCH ", teste.ac$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, garante não existência de efeitos ARCH")
} else {
paste0("teste ARCH ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, existência de efeitos ARCH")
}
arima.previsao <- forecast(arima.vendas, 12)
#autoplot(arima.previsao)
acurracia <- accuracy(arima.previsao$mean, vendas.teste)
acurracia.teste <- acurracia["Test set", "MAPE"]
resultado.acuracia <- paste0("Acurácia do modelo é de ", acurracia.teste %>% formatNumero(), " %")
resultado <- paste(resultado.lb, resultado.ks, resultado.ac, resultado.acuracia, "\n", sep = "\n")
cat(resultado)
p <- autoplot(
vendas.treino,
main = paste0("Grupo: ", grupoPar),
ylab = "Vendas R$ milhões",
xlab = "Meses"
) +
autolayer(vendas.teste, serie = "Valores Reais") +
autolayer(arima.previsao$mean, serie = "Forecast") +
#    scale_colour_viridis_d() +
scale_y_continuous(labels = scales::comma) +
labs(subtitle = resultado) +
theme_bw()
jpeg(filename = paste0("files/forecast", grupoPar, ".jpeg"), width = 1200, height = 400)
print(p)
dev.off()
}
testaPrevisao(grupoPar = "MOVEL", periodoLockDown = c('2020-03', '2020-10'))
testaPrevisao <- function(grupoPar = "MOVEL", periodoLockDown = c('2020-01', '2020-12')) {
mes.inicial.ld <- periodoLockDown[1]
mes.final.ld <- periodoLockDown[2]
meses <- df.vendas %>% select(data) %>% unique()
df.vendas.grupo <- df.vendas %>%
merge(y = df.prd %>% filter(grupo == grupoPar), by = "prdno") %>%
group_by(data) %>%
summarise(totalMensal = sum(valor / 1000000)) %>%
merge(y = meses, by = "data", all.y = TRUE) %>%
mutate(totalMensal = ifelse(is.na(totalMensal), 0.00, totalMensal)) %>%
mutate(totalMensal = ifelse((data %>% format("%Y-%m") < mes.inicial.ld) |
(data %>% format("%Y-%m") > mes.final.ld),
totalMensal, NA))
ts.vendas <- ts(df.vendas.grupo$totalMensal, start = c(2008, 3), end = c(2021, 12), 12)
pt <- autoplot(ts.vendas)
jpeg(filename = paste0("files/serieTemporal", grupoPar, ".jpeg"), width = 1200, height = 400)
print(pt)
dev.off()
vendas.treino <- window(ts.vendas, start = c(2008, 3), end = c(2020, 12))
vendas.teste <- window(ts.vendas, start = c(2021, 1), end = c(2021, 12))
#  autoplot(ts.vendas) +
#    autolayer(vendas.treino, series = "Treino") +
#    autolayer(vendas.teste, series = "Teste") +
#    theme_bw()
arima.vendas <- auto.arima(vendas.treino, trace = T)
jpeg(filename = paste0("files/residuos", grupoPar, ".jpeg"), width = 1200, height = 400)
teste.lb <- checkresiduals(arima.vendas)
dev.off()
# 1. teste de Ljung-Box p-value = 0.5589>0.01, aceitamos H0, resíduos não são
# correlacionados
resultado.lb <- if (teste.lb$p.value >= 0.01) {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" > 0.01 Aceitamos H0, residuos não são correlacionados")
} else {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" < 0.01 Aceitamos H1, residuos são correlacionados")
}
# 2. Normalidade dos resíduos
teste.ks <- ks.test(arima.vendas$residuals, "pnorm", mean(arima.vendas$residuals, na.rm = TRUE),
sd(arima.vendas$residuals, na.rm = TRUE))
resultado.ks <- if (teste.ks$p.value >= 0.01) {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, residuos normais")
} else {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, não normalidade dos resíduos")
}
# p-valor = 0.1237 > 0,01 - Aceita H0, ou seja, resíduos normais
teste.ac <- ArchTest(arima.vendas$residuals)
resultado.ac <- if (teste.ks$p.value >= 0.01) {
paste0("teste ARCH ", teste.ac$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, garante não existência de efeitos ARCH")
} else {
paste0("teste ARCH ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, existência de efeitos ARCH")
}
arima.previsao <- forecast(arima.vendas, 12)
#autoplot(arima.previsao)
acurracia <- accuracy(arima.previsao$mean, vendas.teste)
acurracia.teste <- acurracia["Test set", "MAPE"]
resultado.acuracia <- paste0("Acurácia do modelo é de ", acurracia.teste %>% formatNumero(), " %")
resultado <- paste(resultado.lb, resultado.ks, resultado.ac, resultado.acuracia, "\n", sep = "\n")
cat(resultado)
p <- autoplot(
vendas.treino,
main = paste0("Grupo: ", grupoPar),
ylab = "Vendas R$ milhões",
xlab = "Meses"
) +
autolayer(vendas.teste, serie = "Valores Reais") +
autolayer(arima.previsao$mean, serie = "Forecast") +
#    scale_colour_viridis_d() +
scale_y_continuous(labels = scales::comma) +
labs(subtitle = resultado) +
theme_bw()
jpeg(filename = paste0("files/forecast", grupoPar, ".jpeg"), width = 1200, height = 400)
print(p)
dev.off()
}
testaPrevisao(grupoPar = "MOVEL", periodoLockDown = c('2020-03', '2020-10'))
c('2020-01', '2020-12') %>% strsplit("-")
c('2020-01', '2020-12') %>% strsplit("-")*1
c('2020-01', '2020-12') %>% strsplit("-") %>% as.integer()
c('2020-01', '2020-12') %>% strsplit("-")
c('2020-01', '2020-12') %>% strsplit("-")[[1]]
c('2020-01', '2020-12') %>% strsplit("-") %>% get(1)
l <- c('2020-01', '2020-12') %>% strsplit("-")
l[[1]]
l[[1]]*1
l[[1]] %>% as.integer()
testaPrevisao <- function(grupoPar = "MOVEL", periodoLockDown = c('2020-01', '2020-12')) {
mes.inicial.ld <- periodoLockDown[1]
mes.final.ld <- periodoLockDown[2]
listPeriodo <- periodoLockDown %>% strsplit("-")
start.ld <- listPeriodo[[1]] %>% as.integer()
end.ld <- listPeriodo[[1]] %>% as.integer()
meses <- df.vendas %>% select(data) %>% unique()
df.vendas.grupo <- df.vendas %>%
merge(y = df.prd %>% filter(grupo == grupoPar), by = "prdno") %>%
group_by(data) %>%
summarise(totalMensal = sum(valor / 1000000)) %>%
merge(y = meses, by = "data", all.y = TRUE) %>%
mutate(totalMensal = ifelse(is.na(totalMensal), 0.00, totalMensal))
ts.vendas.total <- ts(df.vendas.grupo$totalMensal, start = c(2008, 3), end = c(2021, 12), 12)
ts.vendas.ld <- window(ts.vendas.total, start.ld, end.ld)
df.vendas.grupo <- df.vendas.grupo%>%
mutate(totalMensal = ifelse((data %>% format("%Y-%m") < mes.inicial.ld) |
(data %>% format("%Y-%m") > mes.final.ld),
totalMensal, NA))
ts.vendas <- ts(df.vendas.grupo$totalMensal, start = c(2008, 3), end = c(2021, 12), 12)
pt <- autoplot(ts.vendas.total) +
autolayer(ts.vendas.ld, series= "Isolamento") +
scale_color_viridis_d() +
theme_bw()
jpeg(filename = paste0("files/serieTemporal", grupoPar, ".jpeg"), width = 1200, height = 400)
print(pt)
dev.off()
vendas.treino <- window(ts.vendas, start = c(2008, 3), end = c(2020, 12))
vendas.teste <- window(ts.vendas, start = c(2021, 1), end = c(2021, 12))
#  autoplot(ts.vendas) +
#    autolayer(vendas.treino, series = "Treino") +
#    autolayer(vendas.teste, series = "Teste") +
#    theme_bw()
arima.vendas <- auto.arima(vendas.treino, trace = T)
jpeg(filename = paste0("files/residuos", grupoPar, ".jpeg"), width = 1200, height = 400)
teste.lb <- checkresiduals(arima.vendas)
dev.off()
# 1. teste de Ljung-Box p-value = 0.5589>0.01, aceitamos H0, resíduos não são
# correlacionados
resultado.lb <- if (teste.lb$p.value >= 0.01) {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" > 0.01 Aceitamos H0, residuos não são correlacionados")
} else {
paste0("teste de Ljung-Box ", teste.lb$p.value %>% formatNumero(),
" < 0.01 Aceitamos H1, residuos são correlacionados")
}
# 2. Normalidade dos resíduos
teste.ks <- ks.test(arima.vendas$residuals, "pnorm", mean(arima.vendas$residuals, na.rm = TRUE),
sd(arima.vendas$residuals, na.rm = TRUE))
resultado.ks <- if (teste.ks$p.value >= 0.01) {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, residuos normais")
} else {
paste0("teste de KS ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, não normalidade dos resíduos")
}
# p-valor = 0.1237 > 0,01 - Aceita H0, ou seja, resíduos normais
teste.ac <- ArchTest(arima.vendas$residuals)
resultado.ac <- if (teste.ks$p.value >= 0.01) {
paste0("teste ARCH ", teste.ac$p.value %>% formatNumero(),
" > 0.01 - Aceitamos H0, garante não existência de efeitos ARCH")
} else {
paste0("teste ARCH ", teste.ks$p.value %>% formatNumero(),
" < 0.01 - Aceitamos H1, existência de efeitos ARCH")
}
arima.previsao <- forecast(arima.vendas, 12)
#autoplot(arima.previsao)
acurracia <- accuracy(arima.previsao$mean, vendas.teste)
acurracia.teste <- acurracia["Test set", "MAPE"]
resultado.acuracia <- paste0("Acurácia do modelo é de ", acurracia.teste %>% formatNumero(), " %")
resultado <- paste(resultado.lb, resultado.ks, resultado.ac, resultado.acuracia, "\n", sep = "\n")
cat(resultado)
p <- autoplot(
vendas.treino,
main = paste0("Grupo: ", grupoPar),
ylab = "Vendas R$ milhões",
xlab = "Meses"
) +
autolayer(vendas.teste, serie = "Valores Reais") +
autolayer(arima.previsao$mean, serie = "Forecast") +
#    scale_colour_viridis_d() +
scale_y_continuous(labels = scales::comma) +
labs(subtitle = resultado) +
theme_bw()
jpeg(filename = paste0("files/forecast", grupoPar, ".jpeg"), width = 1200, height = 400)
print(p)
dev.off()
}
testaPrevisao(grupoPar = "MOVEL", periodoLockDown = c('2020-03', '2020-10'))
loadRDS("lista.treino.RData")
pacotes <- c("readr", "readxl", "plotly", "tidyverse", "gridExtra", "forecast", "TTR",
"smooth", "tsibble", "fable", "tsibbledata", "fpp3", "lubridate",
"urca", "dygraphs", "quantmod", "BETS", "tseries", "FinTS",
"gridExtra", "scales", "caret", "xtable", "tsutils", "GetBCBData",
"quantmod", "dgof", "seasonal", "R6", "coro")
if (sum(as.numeric(!pacotes %in% installed.packages())) != 0) {
instalador <- pacotes[!pacotes %in% installed.packages()]
for (i in seq_along(instalador)) {
install.packages(instalador, dependencies = T)
break() }
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
loadRDS("lista.treino.RData")
readRDS("lista.treino.RData")
lista = readRDS("lista.treino.RData")
View(lista)
lista$acurracia.teste
lista = readRDS("lista.treino.RData")
lista$acurracia.teste
lista = readRDS("lista.treino.RData")
View(lista)
lista = readRDS("lista.treino.RData")
View(lista)
lista[order(lista$acuracia),]
lista[order(lista$acuracia),] %>% head()
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
lista[order(lista$start.treino),] %>% head()
lista[-order(lista$start.treino),] %>% head()
lista[order(-lista$start.treino),] %>% head()
lista[order(lista$start.treino, desc=T),] %>% head()
lista[order(-lista$start.treino),] %>% head()
lista[order(lista$start.treino, decreasing=TRUE), ] %>% head()
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
lista[order(lista$start.treino, decreasing=TRUE), ] %>% head()
View(lista)
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
View(lista)
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
View(lista)
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
lista[order(lista$start.treino, decreasing=TRUE), ] %>% head()
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
lista[order(lista$start.treino, decreasing=TRUE), ] %>% head()
lista = readRDS("lista.treino.RData")
View(lista)
lista = readRDS("lista.treino.RData")
lista[order(lista$acuracia),] %>% head()
View(lista)
